- const critName = name => name.replace('damage', 'critical');

- const templateHeader = name => `&{template:rolls} {{header=^{${name}}}}`
- const rollFormula = attrName => `{{dice=[[{1d20+({@{${attrName}}+(?{Mod.|0})-20,0}kh1),1d0+20}kl1 [Roll]]]}} {{threshold=[[{@{${attrName}}+(?{Mod.|0}),20}kl1[Threshold]]]}} {{fumbleVal=[[20+({@{${attrName}}+(?{Mod.|0}),0}kl1)]]}}`

- const d100TemplateHeader = name => `&{template:brp-characteristic-rolls} {{header=^{${name}}}} {{attack=attack}}`
- const d100RollFormula = attrName => `{{dice=[[{1d100} [Roll]]]}} {{threshold=[[{[[{@{${attrName}} * ?{Difficulty Modifier|Average, 1|Easy, 2|Hard, 0.5} + (?{Situational Modifier|0}),99}kl1]], 5}kh1[Threshold]]]}} {{fumbleVal=[[{[[100-ceil((100-{@{${attrName}} * ?{Difficulty Modifier|Average, 1|Easy, 2|Hard, 0.5} + (?{Situational Modifier|0}),100}kl1[Threshold])/20)]], 96}kh1]]}} {{specialVal=[[{[[ceil((@{${attrName}} * ?{Difficulty Modifier|Average, 1|Easy, 2|Hard, 0.5}  +(?{Situational Modifier|0})[Threshold])/5)]], 1}kh1]]}} {{criticalVal=[[{[[ceil((@{${attrName}} * ?{Difficulty Modifier|Average, 1|Easy, 2|Hard, 0.5} + (?{Situational Modifier|0})[Threshold])/20)]],1}kh1]]}}`

- const damageHeader = name => `&{template:damage-rolls} {{header=^{${name}} (^{damage})}}`
- const damageFormula = damageName => `{{damage=[[{{@{${damageName}}@{roll20_damage_modifier_sign}@{roll20_damage_modifier}},{0}}kh1 [Roll]]]}} {{critical=[[{{@{${critName(damageName)}}@{roll20_damage_modifier_sign}@{roll20_damage_modifier}},{0}}kh1 [Roll]]]}}`;

- const buttonName = name => name.replace(/ /g, '-');
- const attrName = name => name.replace(/ /g, '_');

mixin accentSubheader(name)
  h2.text-accent.small-caps(data-i18n=name)

mixin primarySubheader(name)
  h2.text-primary.small-caps(data-i18n=name)

mixin skillCategoryHeader(name)
  h1.text-primary.small-caps(data-i18n=name)  

mixin boldSubheader(name)  
  h3.bold.uppercase(data-i18n=name)

mixin textInput(name, i18n)
  - i18n = i18n ? i18n : name
  label(data-i18n-title=`enter ${i18n}` title=`enter ${name}`)
    input(data-i18n-placeholder=i18n name=`attr_${attrName(name)}` placeholder=name title=`@{${attrName(name)}}` type='text' value='')

mixin numberInput(name)
  label(data-i18n-title=`enter ${name}` title=`enter ${name}`)
    input(name=`attr_${attrName(name)}` placeholder='#' title=`@{${attrName(name)}}` type='number' value='0')

mixin checkboxInput(name)
  label.styled-checkbox.grid(data-i18n-title=`${name}` title=`${name}`)
    input(name=`attr_${attrName(name)}` title=`@{${attrName(name)}}` type='checkbox' value=name)
    span.pictos 3

mixin checkboxOption(name)
  label.styled-checkbox.grid(data-i18n-title=`${name}` title=`${name}`)
    input(name=`attr_${attrName(name)}` title=`@{${attrName(name)}}` type='checkbox' value=name)

mixin checkboxLabel(name)
  span.text(data-i18n=`${name}`)

mixin brpCharacteristicRollValue(name)
 input(name=`attr_${attrName(name)}` placeholder='#' title=`@{${attrName(name)}}` type='number' value='0' readonly)

mixin brpPercentValue(name)
 input(name=`attr_${attrName(name)}` placeholder='#' title=`@{${attrName(name)}}` type='number' value='0' readonly)

mixin readonlyIntegerValue(name)
 input(name=`attr_${attrName(name)}` placeholder='#' title=`@{${attrName(name)}}` type='number' value='0' readonly)

mixin stringValue(name)
 input(name=`attr_${attrName(name)}`  title=`@{${attrName(name)}}` type='string')

mixin integerValueWithDefault(name, intDefault)
 input(name=`attr_${attrName(name)}` default=intDefault title=`@{${attrName(name)}}` type='number')

mixin readonlyStringValue(name)
  span.text(name)

mixin readonlyStringValueTranslate(name)
  span.text(data-i18n=`${name}`)

mixin brpCharacteristicString(name)
 input(name=`attr_${attrName(name)}` title=`@{${attrName(name)}}` type='string' readonly)

mixin brpAttributeText(name)
  h2.bold.uppercase(data-i18n=`${name.slice(0, 3)}`)

mixin brpDerivedText(name)
  h2.bold.uppercase(data-i18n=name)

mixin brpPersonalText(name)
  h2.bold.uppercase(data-i18n=name)

mixin brpDerivedAttribute(name)
  label(data-i18n-title=`enter ${name}` title=`enter ${name}`)
    input(name=`attr_${attrName(name)}` placeholder='#' title=`@{${attrName(name)}}` type='string' readyonly)

mixin rollButton(name)
  button.capitalize(data-i18n=name title=name name=`roll_${buttonName(name)}` type='roll' value!=`${templateHeader(name)} ${rollFormula(attrName(name))}`)

mixin damageButton(name, i18n)
  - i18n = i18n ? i18n : name
  button.capitalize(data-i18n=i18n name=`roll_${buttonName(name)}` type='roll' value!=`${templateHeader(name)} ${damageFormula(attrName(name))}`)

mixin repeatingRollButton(name)
  button.d20.capitalize(name=`roll_${buttonName(name)}` type='roll' value!=`&{template:rolls} {{header=@{name}}} ${d100RollFormula(attrName(name))}`) t

mixin d100RollButton(name)
  button.uppercase(data-i18n=`${name}` name=`roll_${buttonName(name)}` type='roll' value!=`${d100TemplateHeader(name)} ${d100RollFormula(attrName(name))} {{attack=1}}`) t

mixin d100RollButtonWithoutCaption(name)
  button.d100.capitalize(name=`roll_${buttonName(name)}` type='roll' value!=`${d100TemplateHeader(name)} ${d100RollFormula(attrName(name))} {{attack=1}}`) t

mixin repeatingd100RollButton(name)
  button.d100.capitalize(name=`roll_${buttonName(name)}` type='roll' value!=`${d100TemplateHeader(name)} {{header=@{name}}} ${d100RollFormula(attrName(name))} {{attack=0}}`) t

mixin repeatingDamageRollButton(name)
  button.d100.capitalize(name=`roll_damage` type='roll' value!=`&{template:rolls} {{header=@{name} (Damage)}} {{damageFormula=[[(@{damage}]]}}`) t

mixin damageRollButton(name, damage, critical)
  button.d100.capitalize(name=`roll_damage` type='roll' value!=`${damageHeader(name)} ${damageFormula(attrName(damage))}`) t

mixin damageRollValue(damage)
  span(name=`attr_${attrName(damage)}`)

mixin damageCriticalValue(damage)
  span(name=`attr_${attrName(damage)}`)
  
mixin damageCriticalValue2(damage)
  span.text(critValue(attr_${attrName(damage)})+"fred")


mixin damageRollValue2(damage)
  span(name ="attr_brawl_damage")

mixin tabButtons(value, className, selected)
  - const selectedKeyWord = selected ? 'selected' : ''
  label(class=`${className}` data-i18n-title=`sheet: ${value}`)
    input(name=`attr_sheet_type` title=`@{sheet_type}` type='radio' value=value ${selectedKeyWord})
    span.capitalize.text-center(data-i18n=`${value}`)

mixin textArea(name)
  textarea(data-i18n-placeholder=name name=`attr_${attrName(name)}` placeholder=name)

mixin repeatingFlags(name)
  - const attr = name ? `flag_${attrName(name)}` : 'flag'
  input.flag(name=`attr_${attr}` title='Settings toggle' type='checkbox' value='true' checked)
  span.pictos p

mixin repeatingFlagWithoutCheckmark(name)
  - const attr = name ? `flag_${attrName(name)}` : 'flag'
  input.flag(name=`attr_${attr}` title='Settings toggle' type='checkbox' value='true' checked)
  span(&nbsp;)
  span.capitalize.text-center(&nbsp; data-i18n=`${name}`) 

mixin notesTextarea(name)
  -const attr = attrName(name)
    +repeatingFlags(name)
    span.display(name=`attr_${attr}`)
    +textArea(name)